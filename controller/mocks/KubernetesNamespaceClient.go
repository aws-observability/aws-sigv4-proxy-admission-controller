// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	corev1 "k8s.io/api/core/v1"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/client-go/applyconfigurations/core/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// KubernetesNamespaceClient is an autogenerated mock type for the KubernetesNamespaceClient type
type KubernetesNamespaceClient struct {
	mock.Mock
}

// Apply provides a mock function with given fields: ctx, namespace, opts
func (_m *KubernetesNamespaceClient) Apply(ctx context.Context, namespace *v1.NamespaceApplyConfiguration, opts metav1.ApplyOptions) (*corev1.Namespace, error) {
	ret := _m.Called(ctx, namespace, opts)

	var r0 *corev1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, *v1.NamespaceApplyConfiguration, metav1.ApplyOptions) *corev1.Namespace); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.NamespaceApplyConfiguration, metav1.ApplyOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyStatus provides a mock function with given fields: ctx, namespace, opts
func (_m *KubernetesNamespaceClient) ApplyStatus(ctx context.Context, namespace *v1.NamespaceApplyConfiguration, opts metav1.ApplyOptions) (*corev1.Namespace, error) {
	ret := _m.Called(ctx, namespace, opts)

	var r0 *corev1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, *v1.NamespaceApplyConfiguration, metav1.ApplyOptions) *corev1.Namespace); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.NamespaceApplyConfiguration, metav1.ApplyOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, namespace, opts
func (_m *KubernetesNamespaceClient) Create(ctx context.Context, namespace *corev1.Namespace, opts metav1.CreateOptions) (*corev1.Namespace, error) {
	ret := _m.Called(ctx, namespace, opts)

	var r0 *corev1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Namespace, metav1.CreateOptions) *corev1.Namespace); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Namespace, metav1.CreateOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, name, opts
func (_m *KubernetesNamespaceClient) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ret := _m.Called(ctx, name, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.DeleteOptions) error); ok {
		r0 = rf(ctx, name, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Finalize provides a mock function with given fields: ctx, item, opts
func (_m *KubernetesNamespaceClient) Finalize(ctx context.Context, item *corev1.Namespace, opts metav1.UpdateOptions) (*corev1.Namespace, error) {
	ret := _m.Called(ctx, item, opts)

	var r0 *corev1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Namespace, metav1.UpdateOptions) *corev1.Namespace); ok {
		r0 = rf(ctx, item, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Namespace, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, item, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, name, opts
func (_m *KubernetesNamespaceClient) Get(ctx context.Context, name string, opts metav1.GetOptions) (*corev1.Namespace, error) {
	ret := _m.Called(ctx, name, opts)

	var r0 *corev1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, string, metav1.GetOptions) *corev1.Namespace); ok {
		r0 = rf(ctx, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, metav1.GetOptions) error); ok {
		r1 = rf(ctx, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opts
func (_m *KubernetesNamespaceClient) List(ctx context.Context, opts metav1.ListOptions) (*corev1.NamespaceList, error) {
	ret := _m.Called(ctx, opts)

	var r0 *corev1.NamespaceList
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) *corev1.NamespaceList); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.NamespaceList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, name, pt, data, opts, subresources
func (_m *KubernetesNamespaceClient) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*corev1.Namespace, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name, pt, data, opts)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *corev1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) *corev1.Namespace); ok {
		r0 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, types.PatchType, []byte, metav1.PatchOptions, ...string) error); ok {
		r1 = rf(ctx, name, pt, data, opts, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, namespace, opts
func (_m *KubernetesNamespaceClient) Update(ctx context.Context, namespace *corev1.Namespace, opts metav1.UpdateOptions) (*corev1.Namespace, error) {
	ret := _m.Called(ctx, namespace, opts)

	var r0 *corev1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Namespace, metav1.UpdateOptions) *corev1.Namespace); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Namespace, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, namespace, opts
func (_m *KubernetesNamespaceClient) UpdateStatus(ctx context.Context, namespace *corev1.Namespace, opts metav1.UpdateOptions) (*corev1.Namespace, error) {
	ret := _m.Called(ctx, namespace, opts)

	var r0 *corev1.Namespace
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Namespace, metav1.UpdateOptions) *corev1.Namespace); ok {
		r0 = rf(ctx, namespace, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *corev1.Namespace, metav1.UpdateOptions) error); ok {
		r1 = rf(ctx, namespace, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: ctx, opts
func (_m *KubernetesNamespaceClient) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(ctx, opts)

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(context.Context, metav1.ListOptions) watch.Interface); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, metav1.ListOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewKubernetesNamespaceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewKubernetesNamespaceClient creates a new instance of KubernetesNamespaceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKubernetesNamespaceClient(t mockConstructorTestingTNewKubernetesNamespaceClient) *KubernetesNamespaceClient {
	mock := &KubernetesNamespaceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
